{"version":3,"sources":["../../src/app/group-widgets/GroupSelect.tsx"],"names":["React","GroupsServiceClient","Divider","DualListSelector","GroupSelect","Component","constructor","props","data","subGroups","map","group","translated","id","text","name","checkProps","isChecked","children","toTreeListData","length","newAvailableOptions","newChosenOptions","availableOptions","chosenOptions","state","reloadTrigger","fetchData","groupsService","doGet","vo_id","then","resp","ok","setState","catch","err","console","log","render","onListChange"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ;AAEA,SAASC,mBAAT;AAEA,SACEC,OADF,EAGEC,gBAHF;AAmBA,OAAO,MAAMC,WAAN,SAA0BJ,KAAK,CAACK,SAAhC,CAAwD;AAU7DC,EAAAA,WAAW,CAACC,KAAD,EAAe;AACtB,UAAMA,KAAN;;AADsB,2CARV,IAAIN,mBAAJ,EAQU;;AAAA,8CAJA,EAIA;;AAAA,2CAHF,EAGE;;AAAA,4CAiCRO,IAAD,IAAgD;AAC/D,aAAOA,IAAI,CAACC,SAAL,CAAeC,GAAf,CAAmBC,KAAK,IAAI;AACjC,YAAIC,UAAU,GAAG;AACfC,UAAAA,EAAE,EAAEF,KAAK,CAACE,EADK;AAEfC,UAAAA,IAAI,EAAEH,KAAK,CAACI,IAFG;AAGfC,UAAAA,UAAU,EAAE;AAAE,0BAAcL,KAAK,CAACI;AAAtB,WAHG;AAIfE,UAAAA,SAAS,EAAE;AAJI,SAAjB;AAMA,YAAIC,QAAQ,GAAG,KAAKC,cAAL,CAAoBR,KAApB,CAAf;AACA,YAAGO,QAAQ,CAACE,MAAT,IAAmB,CAAtB,EACER,UAAU,CAAC,UAAD,CAAV,GAAyBM,QAAzB;AACF,eAAON,UAAP;AACD,OAXM,CAAP;AAYD,KA9CyB;;AAAA,0CAiDX,CAACS,mBAAD,EAAsDC,gBAAtD,KAA2G;AACxH,WAAKC,gBAAL,GAAwBF,mBAAxB;AACA,WAAKG,aAAL,GAAqBF,gBAArB;AACD,KApDyB;;AAGtB,SAAKC,gBAAL,GAAwB,CACtB;AAACV,MAAAA,EAAE,EAAE,GAAL;AAAUC,MAAAA,IAAI,EAAE,UAAhB;AAA4BG,MAAAA,SAAS,EAAE;AAAvC,KADsB,EAEtB;AAACJ,MAAAA,EAAE,EAAE,GAAL;AAAUC,MAAAA,IAAI,EAAE,UAAhB;AAA4BG,MAAAA,SAAS,EAAE;AAAvC,KAFsB,CAAxB;AAKA,SAAKQ,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE;AADJ,KAAb;AAGA,SAAKC,SAAL;AACH;;AAGOA,EAAAA,SAAS,GAAE;AACjB,SAAKC,aAAL,CAAoBC,KAApB,CAA0B,qBAAqB,KAAKtB,KAAL,CAAWuB,KAAhC,GAAwC,SAAlE,EACGC,IADH,CACSC,IAAD,IAAe;AACnB,UAAGA,IAAI,CAACC,EAAR,EAAW;AAGT;AAEA,aAAKC,QAAL,CAAc;AACZR,UAAAA,aAAa,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADf,SAAd;AAGD;AAEF,KAZH,EAYKS,KAZL,CAYYC,GAAD,IAAc;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAdH;AAeD;;AAuBMG,EAAAA,MAAM,GAAoB;AAE/B,wBACE,uDACE,iFADF,eAEE,+BAFF,eAGE,oBAAC,OAAD,OAHF,eAKE,oBAAC,gBAAD;AACE,MAAA,YAAY,MADd;AAEE,MAAA,MAAM,MAFR;AAGE,MAAA,gBAAgB,EAAE,KAAKhB,gBAHzB;AAIE,MAAA,aAAa,EAAE,KAAKC,aAJtB;AAKE,MAAA,YAAY,EAAE,KAAKgB,YALrB;AAME,MAAA,EAAE,EAAC;AANL,MALF,eAaE,iCAAM,KAAKf,KAAL,CAAWC,aAAjB,CAbF,CADF;AAiBD;;AAnF4D","sourcesContent":["import * as React from 'react';\r\n\r\nimport { GroupsServiceClient } from '../groups-mngnt-service/groups.service';\r\n\r\nimport {\r\n  Divider,\r\n  Label,\r\n  DualListSelector,\r\n  DualListSelectorTreeItemData\r\n} from '@patternfly/react-core';\r\n\r\n\r\ninterface State {\r\n  reloadTrigger: boolean\r\n}\r\n\r\ninterface Props {\r\n  vo_id: any\r\n  getGroupSelection: any\r\n}\r\n\r\n\r\n\r\nexport class GroupSelect extends React.Component<Props, State> {\r\n\r\n  groupsService = new GroupsServiceClient();\r\n\r\n\r\n\r\n  availableOptions: any[] = [];\r\n  chosenOptions : any[] = [];\r\n\r\n\r\n  constructor(props : Props){\r\n      super(props);\r\n\r\n      this.availableOptions = [\r\n        {id: \"1\", text: \"Option 1\", isChecked: false},\r\n        {id: \"2\", text: \"Option 2\", isChecked: false}\r\n      ];\r\n\r\n      this.state = {\r\n        reloadTrigger: false\r\n      }\r\n      this.fetchData();\r\n  }\r\n\r\n\r\n  private fetchData(){\r\n    this.groupsService!.doGet(\"/groups/user/vo/\" + this.props.vo_id + \"/groups\")\r\n      .then((resp: any) => {\r\n        if(resp.ok){\r\n\r\n\r\n          //this.availableOptions = this.toTreeListData(resp.data);\r\n\r\n          this.setState({\r\n            reloadTrigger: !this.state.reloadTrigger\r\n          });\r\n        }\r\n\r\n      }).catch((err: any) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  toTreeListData = (data: any) : DualListSelectorTreeItemData[] => {\r\n    return data.subGroups.map(group => {\r\n      let translated = {\r\n        id: group.id,\r\n        text: group.name,\r\n        checkProps: { 'aria-label': group.name },\r\n        isChecked: false\r\n      }\r\n      let children = this.toTreeListData(group);\r\n      if(children.length != 0)\r\n        translated['children'] = children;\r\n      return translated;\r\n    });\r\n  }\r\n\r\n\r\n  onListChange = (newAvailableOptions: DualListSelectorTreeItemData[], newChosenOptions: DualListSelectorTreeItemData[]) => {\r\n    this.availableOptions = newAvailableOptions;\r\n    this.chosenOptions = newChosenOptions;\r\n  };\r\n\r\n  public render(): React.ReactNode {\r\n\r\n    return (\r\n      <>\r\n        <p>Please select the groups you would like to join</p>\r\n        <br/>\r\n        <Divider />\r\n\r\n        <DualListSelector\r\n          isSearchable\r\n          isTree\r\n          availableOptions={this.availableOptions}\r\n          chosenOptions={this.chosenOptions}\r\n          onListChange={this.onListChange}\r\n          id=\"dual-list-selector-tree\"\r\n        />\r\n        <div>{this.state.reloadTrigger}</div>\r\n      </>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n"],"file":"GroupSelect.js"}